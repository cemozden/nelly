<html>
    <head>
        <title>Nelly RSS Feeder</title>
        <link rel="shortcut icon" type="image/png" href="/favicon.ico"/>
        <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css">
        <link rel="stylesheet" type="text/css" href="css/bootstrap-grid.min.css">
        <link rel="stylesheet" type="text/css" href="css/main.css">
        <script type="text/javascript" src="js/jquery-3.4.1.min.js"></script>
        <script type="text/javascript" src="js/moment-with-locales.js"></script>
        <script type="text/javascript" src="js/bootstrap.bundle.min.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script>
          const app = {
            feeds : [],
            unreadFeedItems : new Map(),
            activeFeed : {
              feedId : null,
              feedQryStartDate : new Date(),
              feedQryEndDate : new Date()
            }
          };

          function formatDateTime(date) {
            return moment(date).format('L') + ' ' + moment(date).format('LTS');
          }

          $(document).ready(() => {
            const socket = io('<%= expressURL %>/feedCollector');

            socket.on('connect', () => {
              $('#systemError').css('display', 'none');

              if (window.Notification !== undefined && Notification.permission === 'default') $('#notification-alert').slideDown('slow');

              $('#feed-menu').html('');
              $('#dynamic-content').html(`<div id="systemError" style="display:none;" class="alert alert-danger system-notification" role="alert">
                <strong>ERROR:</strong> Connection has been lost to Nelly server. This is probably due to Nelly shutted down. No feed update will occur...
              </div>`);
              
              app.activeFeed = {
                feedId : null,
                feedQryStartDate : new Date(),
                feedQryEndDate : new Date()
              };

                $.ajax({
                  url: '<%= expressURL %>/getfeeds',
                  method: 'GET'
                }).done(feeds => {
                  app.feeds = feeds.sort((a, b) => a.name.localeCompare(b.name));
                  app.feeds.forEach(feed => app.unreadFeedItems.set(feed.feedConfigId, 0));
                  // After fetching feeds, get unread feed item count for each feed...
                  $.ajax({
                  url: '<%= expressURL %>/getunreadfeeditemcount',
                  method: 'GET'
                }).done(unreadFeedItemStatistics => {
                    unreadFeedItemStatistics.forEach(ufis => app.unreadFeedItems.set(ufis.feedId, ufis.itemCount));
                    app.feeds.forEach(feed => addFeedToMenuItem(feed));
                  });

              });

            });

            socket.on('disconnect', () => {
              $('#systemError').css('display', 'block');
            });

            socket.on('feedUpdate', obj => {
              const feedConfig = app.feeds.filter(feed => feed.feedConfigId === obj.feedId)[0];
              const numOfItemsReceived = obj.items.length;
              
              $('#lastTimeUpdated').text(formatDateTime(new Date()));
              $('#lastUpdatedFeed').text(feedConfig.name);

              app.unreadFeedItems.set(obj.feedId, app.unreadFeedItems.get(obj.feedId) + numOfItemsReceived);
              $(`#${obj.feedId}`).html(generateMenuItemText(app.feeds.filter(feed => feed.feedConfigId === obj.feedId)[0]));

              // If Notifications are granted then send notifications to the user..
              if(Notification.permission === 'granted' && feedConfig.notifyUser) {
                
                const bodyMessage =  numOfItemsReceived !== 1 ? `${numOfItemsReceived} feeds received recently!` : `1 feed received recently!`;
                
                const newFeedNotification = new Notification(`New feeds received for ${feedConfig.name}`, {
                    body : bodyMessage,
                    icon: '/img/rss-icon.png'
                });

                newFeedNotification.onclick = () => {
                  if (numOfItemsReceived === 1) {
                    const itemId = obj.items[0].itemId;

                    $.ajax({
                        url: `<%= expressURL %>/feeddetails?itemId=${itemId}`,
                        method: 'POST'    
                      }).done(feedDetails => {
                        $('#dynamic-content').html(feedDetails.html);

                        if (!feedDetails.itemAlreadyRead) {
                          app.unreadFeedItems.set(app.activeFeed.feedId, app.unreadFeedItems.get(app.activeFeed.feedId) - 1);
                          $(`#${app.activeFeed.feedId}`).html(generateMenuItemText(app.feeds.filter(feed => feed.feedConfigId === app.activeFeed.feedId)[0]));
                        }

                    });    
                  }
                };
              }

              // If the feed sent is not the active feed, then don't update the table.
              if (app.activeFeed.feedId !== obj.feedId) return;

              const rowsHTML = obj.items.filter(fi => {
                const pubDate = new Date(fi.pubDate);

                return pubDate >= app.activeFeed.feedQryStartDate && pubDate <= app.activeFeed.feedQryEndDate;
              }).map(fi => convertFeedItemToTableRow(fi)).join('');

              $('#feedSummaryTable tbody').before(rowsHTML);

            });

            socket.on('feedCollectorError', errorMsg => {
              $('#systemError').html(`<strong>ERROR:</strong> An error occured while fetching the RSS feed "${errorMsg.feedName}"!<br /> ${errorMsg.message}`);
              $('#systemError').css('display', 'block');  
              
              setInterval(() => {
                  $('#systemError').css('display', 'none');
              }, 10000);

            });

            moment.locale('<%= systemLocale %>');

            function generateMenuItemText(feed) {
              const numberOfUnreadItem = app.unreadFeedItems.get(feed.feedConfigId);  
              return numberOfUnreadItem > 0 ? `<strong>${feed.name} (${numberOfUnreadItem})</strong>` : feed.name;
            }

            function loadItems(feedId) {
              $.ajax({
                    url: `<%= expressURL %>/feedcontent?feedId=${feedId}`,
                    method: 'POST'    
                  }).done(feedContentResult => {
                    $('#dynamic-content').html(feedContentResult.html);
                    
                    $(`#${app.activeFeed.feedId}`).removeClass('menu-item-selected').addClass('menu-item');

                    app.activeFeed = {
                      feedId,
                      feedQryStartDate : new Date(feedContentResult.queryStartDate),
                      feedQryEndDate : new Date(feedContentResult.queryEndDate),
                    }

                    $(`#${feedId}`).removeClass('menu-item').addClass('menu-item-selected');
                });
            }

            function addFeedToMenuItem(feed) {
              const feedId = feed.feedConfigId;

              $('#feed-menu').append(`<div id="${feedId}" class="menu-item">${generateMenuItemText(feed)}</div>`);
              
              // Feed clicked event on sidebar.
              $(`#${feedId}`).click(() => loadItems(feedId));

            }

            function convertFeedItemToTableRow(feedItem) {
              const rowHTML = `<tr ${!feedItem.read ? 'class="unreadEntry"' : ''}>
                      <td><input type="checkbox" name="${feedItem.itemId}" id="chbSelectRow" /></td>
                      <td><img src="${!feedItem.read ? './img/green-icon.png' : './img/white-icon.png' }" /></td>
                      <td><a href="#" id="${feedItem.itemId}" title="${feedItem.title}" >${feedItem.title}</a></td>
                      <td>${ feedItem.author !== undefined ? feedItem.author : feedItem._NS_DC !== undefined && feedItem._NS_DC.creator !== undefined ? feedItem._NS_DC.creator : '' }</td>
                      <td>${ feedItem.pubDate !== undefined && feedItem.pubDate !== null ? formatDateTime(feedItem.pubDate) : '' }</td>
                    </tr>`;

              return rowHTML;
            }

            function loadMoreItems() {

              function initItems(items) {
                const newRows = items.map(fi => convertFeedItemToTableRow(fi)).join('');

                $('#feedSummaryTable').append(newRows);

                app.activeFeed.feedQryStartDate = startDate;

                $('#feedStartTime').text(moment(startDate).format('L'));
                $('#feedEndTime').text(moment(app.activeFeed.feedQryEndDate).format('L'));
              }

                const startDate = new Date(app.activeFeed.feedQryStartDate);
                
                startDate.setDate(startDate.getDate() - 1);
                startDate.setHours(0);
                startDate.setMinutes(0);
                startDate.setSeconds(0);

                const endDate = new Date(startDate);

                endDate.setHours(23);
                endDate.setMinutes(59);
                endDate.setSeconds(59);

                $.ajax({
                    url: `<%= expressURL %>/getarchiveitems?feedId=${app.activeFeed.feedId}&allItems=true&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`,
                    method: 'GET'    
                  }).done(archiveMessage => {
                    const itemCount = archiveMessage.itemCount;

                    if (itemCount > 0) initItems(archiveMessage.items);
                    else {
                      
                      $.ajax({
                        url: `<%= expressURL %>/checkitemexistsafterdate?date=${startDate.toISOString()}&feedId=${app.activeFeed.feedId}`,
                        method: 'GET'    
                      }).done(itemExistResult => {

                        if (itemExistResult.itemsAvailable) {
                          const startDate = new Date(itemExistResult.nextDate);
                          
                          startDate.setHours(0);
                          startDate.setMinutes(0);
                          startDate.setSeconds(0);
                          
                          $.ajax({
                            url: `<%= expressURL %>/getarchiveitems?feedId=${app.activeFeed.feedId}&allItems=true&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`,
                            method: 'GET'    
                          }).done(archiveMessage => initItems(archiveMessage.items));

                        }
                        else $('#tableFooter').css('display', 'none');
                        
                    });

                    }

                });
            }

            $('body').on('click', '#feedSummaryTable tr a', function() {
                const itemId = $(this).attr('id');

                $.ajax({
                    url: `<%= expressURL %>/feeddetails?itemId=${itemId}`,
                    method: 'POST'    
                  }).done(feedDetails => {
                    $('#dynamic-content').html(feedDetails.html);

                    if (!feedDetails.itemAlreadyRead) {
                      app.unreadFeedItems.set(app.activeFeed.feedId, app.unreadFeedItems.get(app.activeFeed.feedId) - 1);
                      $(`#${app.activeFeed.feedId}`).html(generateMenuItemText(app.feeds.filter(feed => feed.feedConfigId === app.activeFeed.feedId)[0]));
                    }

                });            

            });
            

            $('body').on('click', '#loadMore', () => loadMoreItems());
            $('body').on('click', '#backToFeeds', () => loadItems(app.activeFeed.feedId));
            
            $('#addNewFeed').click(() => {

              $.ajax({
                    url: `<%= expressURL %>/addnewfeed_dialog`,
                    method: 'GET'
                  }).done(form => {
                    $('#modal-content').html(form);
                    $('#nellyModal').modal('show');                    
                }); 

            });

            $('#settings').click(() => {

              $.ajax({
                    url: `<%= expressURL %>/settings`,
                    method: 'GET'
                  }).done(form => {
                    $('#modal-content').html(form);
                    $('#nellyModal').modal('show');                    
                }); 

              });


            $('body').on('click', '#updateFeed', () => {
              $.ajax({
                    url: `<%= expressURL %>/updatefeed_dialog?feedId=${app.activeFeed.feedId}`,
                    method: 'GET'
                  }).done(form => {
                    $('#modal-content').html(form);
                    $('#nellyModal').modal('show');                    
                }); 
            });

            $('body').on('click', '#deleteFeed', () => {
              $.ajax({
                    url: `<%= expressURL %>/deletefeed_dialog?feedId=${app.activeFeed.feedId}`,
                    method: 'GET'
                  }).done(form => {
                    $('#modal-content').html(form);
                    $('#nellyModal').modal('show');                    
                }); 
            });

            $('body').on('click', '#showEntryImage', () => {
              $('#showEntryImage').css('display', 'none');
              $('#mediaImage').css('display', 'block');
            });

            $('body').on('click', '#btnAddNewFeed', () => {
                const feedName = $('#txtFeedName').val();
                const url = $('#txtFeedURL').val();
                const value = parseInt($('#txtValue').val());
                const unit = parseInt($('#cmbUnit').val());
                const enabled = $('#chbEnabled').prop('checked');
                const notifyUser = $('#chbNotifyUser').prop('checked');

                const fetchPeriod = { unit, value };

                $.ajax({
                    url: `<%= expressURL %>/addfeed?categoryId=root&name=${feedName}&url=${url}&fetchPeriod=${JSON.stringify(fetchPeriod)}&enabled=${enabled}&notifyUser=${notifyUser}`,
                    method: 'GET'
                  }).done(addFeedResult => {
                   app.feeds = addFeedResult.feeds.sort((a, b) => a.name.localeCompare(b.name)); 

                   $.ajax({
                    url: '<%= expressURL %>/getunreadfeeditemcount',
                    method: 'GET'
                  }).done(unreadFeedItemStatistics => {
                      app.feeds.forEach(feed => app.unreadFeedItems.set(feed.feedConfigId, 0));
                      unreadFeedItemStatistics.forEach(ufis => app.unreadFeedItems.set(ufis.feedId, ufis.itemCount));
                      $('#feed-menu').html('');
                      app.feeds.forEach(feed => addFeedToMenuItem(feed));
                      $('#nellyModal').modal('hide');
                  });


                }).fail(failMessageResponse => {
                  const failMessage = failMessageResponse.responseJSON;

                  alert(`An error occured while trying to add a new feed!\n${failMessage.message}`);
                }); 


            });

            $('body').on('click', '#btnDeleteFeed', () => {
                
                $.ajax({
                    url: `<%= expressURL %>/deletefeed?feedId=${app.activeFeed.feedId}`,
                    method: 'GET'
                  }).done(addFeedResult => {
                   app.feeds = addFeedResult.feeds.sort((a, b) => a.name.localeCompare(b.name)); 

                   $.ajax({
                    url: '<%= expressURL %>/getunreadfeeditemcount',
                    method: 'GET'
                  }).done(unreadFeedItemStatistics => {

                    app.activeFeed = {
                      feedId : null,
                      feedQryStartDate : new Date(),
                      feedQryEndDate : new Date()
                    };

                      app.feeds.forEach(feed => app.unreadFeedItems.set(feed.feedConfigId, 0));
                      unreadFeedItemStatistics.forEach(ufis => app.unreadFeedItems.set(ufis.feedId, ufis.itemCount));
                      
                      $('#feed-menu').html('');
                      app.feeds.forEach(feed => addFeedToMenuItem(feed));
                      $('#dynamic-content').html('');
                      $('#nellyModal').modal('hide');
                  });


                }).fail(failMessageResponse => {
                  const failMessage = failMessageResponse.responseJSON;

                  alert(`An error occured while trying to delete the feed!\n${failMessage.message}`);
                }); 


            });

            $('body').on('click', '#btnUpdateFeed', () => {
                const feedName = $('#txtFeedName').val();
                const url = $('#txtFeedURL').val();
                const value = parseInt($('#txtValue').val());
                const unit = parseInt($('#cmbUnit').val());
                const enabled = $('#chbEnabled').prop('checked');
                const notifyUser = $('#chbNotifyUser').prop('checked');

                const fetchPeriod = { unit, value };

                $.ajax({
                    url: `<%= expressURL %>/updatefeed?categoryId=root&name=${feedName}&url=${url}&fetchPeriod=${JSON.stringify(fetchPeriod)}&enabled=${enabled}&feedId=${app.activeFeed.feedId}&notifyUser=${notifyUser}`,
                    method: 'GET'
                  }).done(addFeedResult => {
                   app.feeds = addFeedResult.feeds.sort((a, b) => a.name.localeCompare(b.name)); 

                   $.ajax({
                    url: '<%= expressURL %>/getunreadfeeditemcount',
                    method: 'GET'
                  }).done(unreadFeedItemStatistics => {
                      app.feeds.forEach(feed => app.unreadFeedItems.set(feed.feedConfigId, 0));
                      unreadFeedItemStatistics.forEach(ufis => app.unreadFeedItems.set(ufis.feedId, ufis.itemCount));
                      $('#feed-menu').html('');
                      app.feeds.forEach(feed => addFeedToMenuItem(feed));
                      $('#nellyModal').modal('hide');
                  });


                }).fail(failMessageResponse => {
                  const failMessage = failMessageResponse.responseJSON;

                  alert(`An error occured while trying to update the feed!\n${failMessage.message}`);
                }); 


            });

            $('#btnAskNotification').click(() => {
              if (window.Notification !== undefined && Notification.permission === 'default') {
                Notification.requestPermission().then(permission => {
                    if (permission === 'denied' || permission === 'granted') $('#notification-alert').slideUp('slow');
                });
              }
            });

            $('body').on('click', '#btnUpdateSettings', () => {

                const serverPort = parseInt($('#txtServerPort').val());
                const value = parseInt($('#txtValue').val());
                const unit = parseInt($('#cmbUnit').val());
                const systemLocale = $('#txtSystemLocale').val();

                const fetchPeriod = { unit, value };

                $.ajax({
                    url: `<%= expressURL %>/updatesettings?serverPort=${serverPort}&archiveCleaningPeriod=${JSON.stringify(fetchPeriod)}&systemLocale=${systemLocale}`,
                    method: 'GET'
                  }).done(updatedSettings => {
                    $('#nellyModal').modal('hide');
                    if (updatedSettings.portUpdated) {
                      $('#systemError').html(`<strong>WARNING:</strong> Nelly Server port is updated! <strong>Application will be restarted in 15 seconds.</strong>\nFrom now, You should access the application via <strong>"http://localhost:${updatedSettings.settings.serverPort}/"</strong>`);
                      $('#systemError').css('display', 'block');
                    }
                    else if(updatedSettings.localeUpdated) {
                      $('#systemError').html(`<strong>WARNING:</strong> Nelly Server locale is updated! <strong>Application will be restarted in 15 seconds.</strong>\nFrom now, You'll be using <strong>"${updatedSettings.settings.systemLocale}"</strong> locale settings.`);
                      $('#systemError').css('display', 'block');
                    }

                }).fail(failMessageResponse => {
                  const failMessage = failMessageResponse.responseJSON;

                  alert(`An error occured while trying to update the feed!\n${failMessage.message}`);
                }); 


            });

            $("#feedContent").scroll(() => {
              
              const scrollTop = $('#feedContent').prop('scrollTop');
              const scrollTopMax = $('#feedContent').prop('scrollTopMax');

              if (scrollTop === scrollTopMax && app.activeFeed.feedId !== null) loadMoreItems();
              
            });

            $('body').on('click', 'input[id=chbSelectRow]', function() {

               if ($('#tableOptions').css('display') === 'none' && $('input[id=chbSelectRow]').length > 0) {
                $('#tableOptions').css('display', 'block');
               }
               else if ($('#chbSelectRow:checked').length === 0) {
                $('#tableOptions').css('display', 'none');
               }
            });

            $('body').on('click', '#markAsRead', () => {
              const selectedRows = $('#chbSelectRow:checked');
              const selectedItemIds = [];

              for (let i = 0 ; i < selectedRows.length ; i++) selectedItemIds.push(selectedRows[i].name);

              $.ajax({
                    url: `<%= expressURL %>/setfeeditemsread?itemRead=true&itemIds=${JSON.stringify(selectedItemIds)}`,
                    method: 'GET'
                  }).done(itemsRead => {
                    loadItems(app.activeFeed.feedId);
                    const feedId = app.activeFeed.feedId;

                    $.ajax({
                      url: '<%= expressURL %>/getunreadfeeditemcount',
                      method: 'GET'
                    }).done(unreadFeedItemStatistics => {
                        app.feeds.forEach(feed => app.unreadFeedItems.set(feed.feedConfigId, 0));
                        unreadFeedItemStatistics.forEach(ufis => app.unreadFeedItems.set(ufis.feedId, ufis.itemCount));
                        $('#feed-menu').html('');
                        app.feeds.forEach(feed => addFeedToMenuItem(feed));
                        $(`#${feedId}`).addClass('menu-item-selected');
                      });

                }).fail(failMessageResponse => {
                  const failMessage = failMessageResponse.responseJSON;

                  alert(`An error occured while trying to mark feed items read!\n${failMessage.message}`);
                }); 

            });

            $('body').on('click', '#selectAll', () => {
                const checkBoxSelected = $('#selectAll').prop('checked');

                if (checkBoxSelected) {
                  $('input[id=chbSelectRow]').each(function() {
                    $(this).prop('checked', true);
                  });
                  $('#tableOptions').css('display', 'block');
                }
                else {
                  $('input[id=chbSelectRow]').each(function() {
                    $(this).prop('checked', false);
                  });
                  $('#tableOptions').css('display', 'none');
                }

            });

            
          });

        </script>
    </head>
    <body>
        <div class="wrapper">
            <div class="pagetop">
                <div class="top-left">
                    <h1>Nelly RSS Feeder</h1>
                    <h4>Version: <%= nellyVersion %></h4>
                </div>
                <div class="top-right">
                  <p>Last Time Updated: <span id="lastTimeUpdated">Not yet updated</span></p>
                  <p>Last Updated Feed: <span id="lastUpdatedFeed">Not yet updated</span></p>
                  <p><a href="#" id="addNewFeed">Add New Feed</a> | <a id="settings" href="#">Settings</a></p>
                </div>
            </div>
            <div class="sidebar">
              <div class="feedsHeader">
                  <h3>RSS Feeds</h3>
              </div>
              <div id="feed-menu" class="sidebar-menu"></div>
            </div>
            <div id="feedContent" class="content">
              <div id="notification-alert" style="display: none;" class="alert alert-primary system-notification" role="alert">
                <h4 class="alert-heading">Notifications, better way to follow up feeds.</h4>
                <p>Notifications allow you to be informed when an important feed of yours is updated. In order to activate it, Please allow this page to send notifications.</p>
                <hr>
                <button id="btnAskNotification" class="btn btn-primary">Activate Now!</button>
              </div>
              <div id="systemError" style="display:none;" class="alert alert-danger system-notification" role="alert">
                <strong>ERROR:</strong> Connection has been lost to Nelly server. This is probably due to Nelly shutted down. No feed update will occur...
              </div>
              <div id="dynamic-content">

              </div>
            </div>
        </div>
        <div class="modal fade" id="nellyModal" tabindex="-1" role="dialog">
          <div class="modal-dialog" role="document">
            <div id="modal-content" class="modal-content">
              
            </div>
          </div>
        </div>
    </body>
</html>